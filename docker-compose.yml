version: '3'

services:
  redis:
    image: redis:latest
    ports:
      - 6379:6379
    volumes:
      - ./config/redis.conf:/redis.conf
    command: [ "redis-server", "/redis.conf" ]
    networks:
    - deployml_network

  modelserver:
    image: shanesoh/modelserver
    build: ./modelserver
    depends_on:
    - redis
    volumes:
    - ./files/:/app/files
    networks:
    - deployml_network
    env_file:
    - app.env
    environment:
    - SERVER_SLEEP=0.25  # Time in ms between each poll by model server against Redis
    - BATCH_SIZE=64  # Number of records to process in each batch
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == worker

  webserver:
    image: shanesoh/webserver
    build: ./webserver
    ports:
    - "80:80"
    networks:
    - deployml_network
    depends_on:
    - redis
    volumes:
    - ./files/:/app/files
    env_file:
    - app.env
    environment:
    - CLIENT_SLEEP=0.25  # Time in ms between each poll by web server against Redis
    - CLIENT_MAX_TRIES=100  # Num tries by web server to retrieve results from Redis before giving up
    deploy:
      placement:
        constraints:
        - node.role == manager

  # grafana:
  #     image: grafana/grafana:latest
  #     container_name: grafana-DT
  #     ports:
  #       - "85:3000"
  #     networks:
  #       - deployml_network
  #     user: "0"
  #     environment:
  #       - GF_DASHBOARDS_JSON_ENABLED=true
  #       - GF_INSTALL_PLUGINS=redis-datasource
  #       - GF_DASHBOARDS_JSON_PATH=./docker-compose.d/grafana
  #     links:
  #       - redis #redisDB
  #     volumes:
  #       - ./grafana/data:/var/lib/grafana

  influxdb:
      container_name: influxdb
      image: influxdb:1.8-alpine #influxdb:latest
      volumes:
      - ./influxdb:/var/lib/influxdb
      ports:
      - 8086:8086
      networks:
        - deployml_network
      restart: always 


  grafana:
      container_name: "grafana"
      image: grafana/grafana:latest
      volumes:
      - ./grafana/data:/var/lib/grafana
      links:
      - influxdb
      ports:
      - 85:3000
      networks:
       - deployml_network
      user: "0"
      depends_on:
      - influxdb
      restart: always

networks:
    deployml_network:

